@using Miscshopify.Core.Models;
@model IEnumerable<ProductViewModel>

@{
    var cartMessage = TempData["CartMessage"] as string;
}

<head>
    <title>Products</title>
    <link href="~/css/site.css" rel="stylesheet">
</head>

<div class="container">
    <form method="get">
        <label for="minPrice">Minimum Price (BGN):</label>
        <input type="number" id="minPrice" name="minPrice" min="0">

        <label for="maxPrice">Maximum Price (BGN):</label>
        <input type="number" id="maxPrice" name="maxPrice">

        <a asp-action="FilterProducts" asp-controller="Product" asp-route-id="@Model.ToList()" class="btn btn-sm btn-danger mr-25">
            Filter
            <i class="fa-solid fa-circle-xmark"></i>
        </a>
    </form>

    <div class="card-deck">
        @foreach (var product in Model)
        {
            <div class="card-body card mb-3 col-md-3">
                <a href="@Url.Action("ProductDetails", "Product", new { id = product.Id })">
                    <img src="~/@product.ImagePath" class="card-img-top" alt="@product.Name">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text">@product.Price BGN</p>
                </a>
                <div class="d-flex flex-column flex-sm-row pt-1 center">
                    <a asp-action="AddToCart" asp-controller="Cart" asp-route-id="@product.Id" class="btn btn-primary mr-0 mr-sm-2 mb-1 mb-sm-0">
                        <i class="fas fa-shopping-basket mr-2"></i>
                        <span>Add to cart</span>
                    </a>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(cartMessage))
        {
            <div class="alert alert-success" role="alert">
                @cartMessage
            </div>
        }
    </div>
</div>

<script>
    function filterProducts() {
        const minPrice = document.getElementById("minPrice").value;
        const maxPrice = document.getElementById("maxPrice").value;

        // Handle empty input fields (optional)
        if (minPrice === "" || maxPrice === "") {
            alert("Please enter both minimum and maximum price values.");
            return; // Exit the function if both fields are empty
        }

        try {
            const minPriceValue = Convert.ToDecimal(minPrice);
            const maxPriceValue = Convert.ToDecimal(maxPrice);

            // Ensure minPriceValue is less than or equal to maxPriceValue (optional)
            if (minPriceValue > maxPriceValue) {
                alert("Minimum price cannot be greater than maximum price.");
                return; // Exit the function if min price is higher than max price
            }

            const filteredProducts = Model.Where(p => p.Price >= minPriceValue && p.Price <= maxPriceValue);

            // Update the view based on filteredProducts (implementation needed)
            console.log("Filtered products:", filteredProducts); // For debugging

        } catch (error) {
            console.error("Error converting price values:", error);
            // Handle conversion errors (optional)
        }
    }

    // Attach event handler to the submit button (or form submission event)
    document.getElementById("submitButton").addEventListener("click", filterProducts);
</script>
